import * as v1 from "./v1/index.js";
import { request } from "./request/index.js";
export class OpenAI {
    config;
    constructor(config) {
        this.config = config;
    }
    v1() {
        const client = this.makeClient("v1");
        return {
            models: {
                list: v1.listModels(client),
                retrieve: v1.retrieveModel(client),
                delete: v1.deleteModel(client),
            },
            completions: {
                create: v1.createCompletion(client)
            },
            chat: {
                create: v1.createChat(client)
            },
            edits: {
                create: v1.createEdit(client)
            },
            images: {
                create: v1.createImage(client),
                edit: v1.editImage(client),
                createVariation: v1.createImageVariation(client)
            },
            embeddings: {
                create: v1.createEmbedding(client)
            },
            audio: {
                createTranscription: v1.createAudioTranscription(client),
                createTranslation: v1.createAudioTranslation(client)
            },
            files: {
                list: v1.listFiles(client),
                retrieve: v1.retrieveFile(client),
                upload: v1.uploadFile(client),
                delete: v1.deleteFile(client),
                retrieveContent: v1.retrieveFileContent(client)
            },
            fineTunes: {
                create: v1.createFineTune(client),
                list: v1.listFineTunes(client),
                retrieve: v1.retrieveFineTune(client),
                cancel: v1.cancelFineTune(client),
                listEvents: v1.listFineTuneEvents(client),
            },
            moderations: {
                create: v1.createModeration(client)
            },
        };
    }
    makeClient(version) {
        return async (path, options, direct = false) => {
            if (this.config.options) {
                options = Object.assign(this.config.options, options);
            }
            const headers = {
                Authorization: `Bearer ${this.config.apiKey}`,
            };
            if (this.config.organization) {
                headers["OpenAI-Organization"] = this.config.organization;
            }
            options.headers = Object.assign(headers, options.headers || {});
            const endpoint = this.config.endpoint || "https://api.openai.com";
            const url = `${endpoint}/${version}/${path}`;
            const response = await request(url, options, direct ? "original" : "json");
            if (response.status !== 200) {
                throw new Error(direct ? response.statusText : response.body.error.message);
            }
            return response.body;
        };
    }
}
//# sourceMappingURL=index.js.map