import requestFeature from "./feature/index.js";
export class StreamFile {
    name;
    stream;
    constructor(file) {
        if (typeof file === "string") {
            const { createReadStream } = require("fs");
            this.stream = createReadStream(file);
            this.name = this.basename(file);
        }
        else {
            this.stream = file;
            this.name = this.basename(file.name);
        }
    }
    basename(path) {
        return path.split(/[\\/]/).pop() || "";
    }
}
export function readFile(file) {
    return new StreamFile(file);
}
export async function request(url, init, format) {
    const response = {
        status: 200,
        statusText: "OK",
        headers: {},
        body: null,
    };
    if (typeof fetch === "function") {
        const options = {};
        await requestFeature(async (feature) => feature.forFetch(init, options));
        const resp = await fetch(url, options);
        response.status = resp.status;
        response.statusText = resp.statusText;
        resp.headers.forEach((value, key) => {
            response.headers[key.toLocaleLowerCase()] = value;
        });
        if (format === "json") {
            if (!resp.headers.get("content-type")?.match(/^application\/json/)) {
                throw new Error(`Unexpected Content-Type: ${resp.headers.get("content-type")}`);
            }
            response.body = await resp.json();
        }
        else if (format === "text") {
            if (!resp.headers.get("content-type")?.match(/^text\//)) {
                throw new Error(`Unexpected Content-Type: ${resp.headers.get("content-type")}`);
            }
            response.body = await resp.text();
        }
        else {
            response.body = resp;
        }
        return response;
    }
    else {
        const { request: requestClient } = await import("https");
        const { request: httpRequestClient } = await import("http");
        const isHttps = url.startsWith("https://");
        const client = isHttps ? requestClient : httpRequestClient;
        const options = {};
        await requestFeature(async (feature) => feature.forRequest(init, options));
        const req = client(url, options);
        await requestFeature(async (feature) => feature.forRequestClient(init, req));
        return new Promise((resolve, reject) => {
            req.on("response", (res) => {
                response.status = res.statusCode || 200;
                response.statusText = res.statusMessage || "OK";
                response.headers = res.headers;
                if (format === "original") {
                    response.body = res;
                    resolve(response);
                }
                else {
                    const chunks = [];
                    res.on("data", (chunk) => chunks.push(chunk));
                    res.on("end", () => {
                        const data = Buffer.concat(chunks).toString();
                        if (format === "json") {
                            if (!res.headers["content-type"]?.match(/^application\/json/)) {
                                return reject(new Error(`Unexpected Content-Type: ${res.headers["content-type"]}`));
                            }
                            response.body = JSON.parse(data);
                        }
                        else {
                            if (!res.headers["content-type"]?.match(/^text\//)) {
                                return reject(new Error(`Unexpected Content-Type: ${res.headers["content-type"]}`));
                            }
                            response.body = data;
                        }
                        resolve(response);
                    });
                }
            });
            req.on("error", reject);
            req.end();
        });
    }
}
//# sourceMappingURL=index.js.map