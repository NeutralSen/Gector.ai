"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = exports.readFile = exports.StreamFile = void 0;
const feature_1 = __importDefault(require("./feature"));
class StreamFile {
    constructor(file) {
        if (typeof file === "string") {
            const { createReadStream } = require("fs");
            this.stream = createReadStream(file);
            this.name = this.basename(file);
        }
        else {
            this.stream = file;
            this.name = this.basename(file.name);
        }
    }
    basename(path) {
        return path.split(/[\\/]/).pop() || "";
    }
}
exports.StreamFile = StreamFile;
function readFile(file) {
    return new StreamFile(file);
}
exports.readFile = readFile;
async function request(url, init, format) {
    var _a, _b;
    const response = {
        status: 200,
        statusText: "OK",
        headers: {},
        body: null,
    };
    if (typeof fetch === "function") {
        const options = {};
        await (0, feature_1.default)(async (feature) => feature.forFetch(init, options));
        const resp = await fetch(url, options);
        response.status = resp.status;
        response.statusText = resp.statusText;
        resp.headers.forEach((value, key) => {
            response.headers[key.toLocaleLowerCase()] = value;
        });
        if (format === "json") {
            if (!((_a = resp.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.match(/^application\/json/))) {
                throw new Error(`Unexpected Content-Type: ${resp.headers.get("content-type")}`);
            }
            response.body = await resp.json();
        }
        else if (format === "text") {
            if (!((_b = resp.headers.get("content-type")) === null || _b === void 0 ? void 0 : _b.match(/^text\//))) {
                throw new Error(`Unexpected Content-Type: ${resp.headers.get("content-type")}`);
            }
            response.body = await resp.text();
        }
        else {
            response.body = resp;
        }
        return response;
    }
    else {
        const { request: requestClient } = await Promise.resolve().then(() => __importStar(require("https")));
        const { request: httpRequestClient } = await Promise.resolve().then(() => __importStar(require("http")));
        const isHttps = url.startsWith("https://");
        const client = isHttps ? requestClient : httpRequestClient;
        const options = {};
        await (0, feature_1.default)(async (feature) => feature.forRequest(init, options));
        const req = client(url, options);
        await (0, feature_1.default)(async (feature) => feature.forRequestClient(init, req));
        return new Promise((resolve, reject) => {
            req.on("response", (res) => {
                response.status = res.statusCode || 200;
                response.statusText = res.statusMessage || "OK";
                response.headers = res.headers;
                if (format === "original") {
                    response.body = res;
                    resolve(response);
                }
                else {
                    const chunks = [];
                    res.on("data", (chunk) => chunks.push(chunk));
                    res.on("end", () => {
                        var _a, _b;
                        const data = Buffer.concat(chunks).toString();
                        if (format === "json") {
                            if (!((_a = res.headers["content-type"]) === null || _a === void 0 ? void 0 : _a.match(/^application\/json/))) {
                                return reject(new Error(`Unexpected Content-Type: ${res.headers["content-type"]}`));
                            }
                            response.body = JSON.parse(data);
                        }
                        else {
                            if (!((_b = res.headers["content-type"]) === null || _b === void 0 ? void 0 : _b.match(/^text\//))) {
                                return reject(new Error(`Unexpected Content-Type: ${res.headers["content-type"]}`));
                            }
                            response.body = data;
                        }
                        resolve(response);
                    });
                }
            });
            req.on("error", reject);
            req.end();
        });
    }
}
exports.request = request;
//# sourceMappingURL=index.js.map