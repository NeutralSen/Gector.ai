"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormFeature = void 0;
async function uploadFile(file, client) {
    return new Promise((resolve, reject) => {
        const stream = file.stream;
        stream.on("error", reject);
        stream.on("end", () => {
            client.write("\r\n");
            resolve();
        });
        stream.pipe(client, { end: false });
    });
}
class FormFeature {
    forRequest(init, options) { }
    async forRequestClient(init, client) {
        if (init.form) {
            const boundary = "--------------------------" + Date.now().toString(16);
            client.setHeader("Content-Type", `multipart/form-data; boundary=${boundary}`);
            for (const key in init.form) {
                const value = init.form[key];
                client.write(`--${boundary}\r\n`);
                client.write(`Content-Disposition: form-data; name="${key}"`);
                if (typeof value === "string") {
                    client.write(`\r\n\r\n${value}\r\n`);
                }
                else {
                    client.write(`; filename="${value.name}"\r\n`);
                    client.write(`Content-Type: application/octet-stream\r\n\r\n`);
                    await uploadFile(value, client);
                }
            }
            client.write(`--${boundary}--\r\n`);
        }
    }
    forFetch(init, options) {
        if (init.form) {
            options.headers = {
                ...options.headers,
                "Content-Type": "multipart/form-data",
            };
            const formData = new FormData();
            for (const key in init.form) {
                const value = init.form[key];
                if (typeof value === "string") {
                    formData.append(key, value);
                }
                else {
                    formData.append(key, value.stream, value.name);
                }
            }
            options.body = formData;
        }
    }
}
exports.FormFeature = FormFeature;
//# sourceMappingURL=form.js.map